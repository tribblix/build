--- a/cpp/src/arrow/vendored/xxhash/xxhash.h	Wed Mar 13 13:37:59 2024
+++ b/cpp/src/arrow/vendored/xxhash/xxhash.h	Mon Apr 22 16:13:05 2024
@@ -2160,7 +2160,7 @@
 
 /* note: use after variable declarations */
 #ifndef XXH_STATIC_ASSERT
-#  if defined(__STDC_VERSION__) && (__STDC_VERSION__ >= 201112L)    /* C11 */
+#  if defined(__STDC_VERSION__) && (__STDC_VERSION__ >= 201112L) && !defined(__cplusplus)    /* C11 */
 #    define XXH_STATIC_ASSERT_WITH_MESSAGE(c,m) do { _Static_assert((c),m); } while(0)
 #  elif defined(__cplusplus) && (__cplusplus >= 201103L)            /* C++11 */
 #    define XXH_STATIC_ASSERT_WITH_MESSAGE(c,m) do { static_assert((c),m); } while(0)
--- a/cpp/src/arrow/util/value_parsing.h	Wed Mar 13 13:37:59 2024
+++ b/cpp/src/arrow/util/value_parsing.h	Mon Apr 22 16:15:57 2024
@@ -822,7 +822,7 @@
   if (!ignore_time_in_day) {
     secs += (std::chrono::hours(result.tm_hour) + std::chrono::minutes(result.tm_min) +
              std::chrono::seconds(result.tm_sec));
-#ifndef _WIN32
+#ifndef __sun
     secs -= std::chrono::seconds(result.tm_gmtoff);
 #endif
   }
--- a/cpp/src/arrow/util/float16.h	Mon Apr 22 16:20:23 2024
+++ b/cpp/src/arrow/util/float16.h	Mon Apr 22 16:20:41 2024
@@ -74,7 +74,7 @@
   constexpr uint16_t bits() const { return bits_; }
 
   /// \brief Return true if the value is negative (sign bit is set)
-  constexpr bool signbit() const { return (bits_ & 0x8000) != 0; }
+  constexpr bool arsignbit() const { return (bits_ & 0x8000) != 0; }
 
   /// \brief Return true if the value is NaN
   constexpr bool is_nan() const { return (bits_ & 0x7fff) > 0x7c00; }
@@ -158,8 +158,8 @@
     return (lhs.bits() == rhs.bits()) || (lhs.is_zero() && rhs.is_zero());
   }
   static constexpr bool CompareLt(Float16 lhs, Float16 rhs) {
-    if (lhs.signbit()) {
-      if (rhs.signbit()) {
+    if (lhs.arsignbit()) {
+      if (rhs.arsignbit()) {
         // Both are negative
         return lhs.bits() > rhs.bits();
       } else {
@@ -166,7 +166,7 @@
         // Handle +/-0
         return !lhs.is_zero() || rhs.bits() != 0;
       }
-    } else if (rhs.signbit()) {
+    } else if (rhs.arsignbit()) {
       return false;
     } else {
       // Both are positive
--- a/cpp/src/arrow/compare.cc	Mon Apr 22 17:53:15 2024
+++ b/cpp/src/arrow/compare.cc	Mon Apr 22 18:46:54 2024
@@ -107,7 +107,7 @@
     Float16 f_x = Float16::FromBits(x);
     Float16 f_y = Float16::FromBits(y);
     if (x == y) {
-      return Flags::signed_zeros_equal || (f_x.signbit() == f_y.signbit());
+      return Flags::signed_zeros_equal || (f_x.arsignbit() == f_y.arsignbit());
     }
     if (Flags::nans_equal && f_x.is_nan() && f_y.is_nan()) {
       return true;
--- a/cpp/src/parquet/statistics.cc	Tue Apr 16 15:48:56 2024
+++ b/cpp/src/parquet/statistics.cc	Mon Apr 22 20:21:56 2024
@@ -384,10 +384,10 @@
     return ::std::nullopt;
   }
 
-  if (min.is_zero() && !min.signbit()) {
+  if (min.is_zero() && !min.arsignbit()) {
     min_flba = FLBA{Float16Constants::negative_zero()};
   }
-  if (max.is_zero() && max.signbit()) {
+  if (max.is_zero() && max.arsignbit()) {
     max_flba = FLBA{Float16Constants::positive_zero()};
   }
 
