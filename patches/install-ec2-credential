#!/bin/bash
#
# SPDX-License-Identifier: CDDL-1.0
#
# This script finds the ssh key associated with the instance and installs it
# if necessary. Gets run once at boot by smf(7)
#
# This is a hardened version of the OmniTI original, with extra checks
# and retries
#

. /lib/svc/share/smf_include.sh

#
# we really don't want this in a non-global zone, just exit cleanly
# after trying to disable ourself
#
if smf_is_nonglobalzone; then
    /usr/sbin/svcadm disable $SMF_FMRI
    exit $SMF_EXIT_OK
fi

# Emit a message upon failure
bail() {
    echo "ERROR: $@"
    exit $SMF_EXIT_ERR_FATAL
}

if [ ! -d /root/.ssh ] ; then
    mkdir -p -m 0700 /root/.ssh || bail "Could not create /root/.ssh directory"
fi

# Fetch public key using HTTP
MYKEY=$(/usr/bin/curl -s http://169.254.169.254/latest//meta-data/public-keys/0/openssh-key)

#
# if it comes back empty, retry
# if it's not a valid key, retry
#
while [ -z "${MYKEY}" ] ; do
    sleep 2
    MYKEY=$(/usr/bin/curl -s http://169.254.169.254/latest//meta-data/public-keys/0/openssh-key)
    if [ "${MYKEY:0:3}" != "ssh" ] ; then
	echo "Problem fetching openssh-key, try again"
	MYKEY=""
    fi
done

/usr/bin/grep -q "$MYKEY" /root/.ssh/authorized_keys 2>/dev/null && exit $SMF_EXIT_OK

#
# In the simplest course of events, we would only reach here on first boot
# but that's not true in general - we could also get here, if the key
# was changed, or someone modified authorized_keys
# we could also not get here on a first boot depending on how the
# image was constructed.
#
# So we do other first boot activity, sanity checking if
# it's possible to do so
#

echo "$MYKEY" >> /root/.ssh/authorized_keys
chmod 600 /root/.ssh/authorized_keys || bail "Could not set permissions on authorized_keys file"

#
# this should be rpool, but just in case
#
RPOOL=$(/usr/sbin/zfs get -H mountpoint / | /usr/bin/awk -F/ '{print $1}')

#
# Generate a new unique identifier for the root zfs pool, so that this
# instance is unique.
#
/usr/sbin/zpool reguid "${RPOOL}"

#
# We also want the uuid of the system's boot environment to be unique.
# Check for zones, as if we changed it in the presence of zones then
# that would break zone uninstall, and only update the uuid if no zones
# currently exist.
#
ZONES=$(/usr/bin/grep -v -e '^#' -e '^global:' /etc/zones/index)
if [ -z "${ZONES}" ] ; then
    BENAME=$(/sbin/beadm list -H | awk -F\; '{if ($3=="NR") print $1}')
    /usr/sbin/zfs set org.opensolaris.libbe:uuid=$(/usr/lib/zap/generate-uuid) ${RPOOL}/ROOT/${BENAME}
fi

#
# use the local NTP IPv4 endpoint for time synchronization
# with the public Amazon Time Sync Service as backup
# alway override any other config file
#
cat > /etc/inet/chrony.conf <<_EOF
# NTP configuration for chrony on EC2
driftfile /var/lib/chrony/drift
ntsdumpdir /var/lib/chrony
pidfile /var/run/chrony/chronyd.pid
server 169.254.169.123 prefer iburst minpoll 4 maxpoll 4
pool time.aws.com iburst
_EOF
/usr/bin/chmod 0644 /etc/inet/chrony.conf
/usr/sbin/svcadm restart svc:/network/chrony:default
/usr/sbin/svcadm enable svc:/network/chrony:default

exit $SMF_EXIT_OK
