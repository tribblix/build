From 15182db8e5311b6478aeb352c25f6718d9fb4529 Mon Sep 17 00:00:00 2001
From: Ander Juaristi <a@juaristi.eus>
Date: Sat, 2 Sep 2023 12:04:47 +0200
Subject: [PATCH 1/2] dns: Merge SOCK_STREAM and SOCK_DGRAM addrinfo lists

We want resolve() to return both, TCP and UDP sockets.

On Linux, we could set .ai_socktype = 0 on the getaddrinfo() hints which
would return us all the socket types available. However, that is not
accepted on Windows. Instead, we ask for TCP and UDP sockets separately
and then merge the two lists.
---
 libwget/dns.c | 53 +++++++++++++++++++++++++++++++++++++++------------
 1 file changed, 41 insertions(+), 12 deletions(-)

diff --git a/libwget/dns.c b/libwget/dns.c
index adc6fcf9a..389caf537 100644
--- a/libwget/dns.c
+++ b/libwget/dns.c
@@ -222,35 +222,64 @@ static struct addrinfo *sort_preferred(struct addrinfo *addrinfo, int preferred_
 	}
 }
 
+static int getaddrinfo_merging(const char *host, const char *s_port, struct addrinfo *hints, struct addrinfo **out_addr)
+{
+	struct addrinfo *ai_tail;
+
+	if (!*out_addr)
+		return getaddrinfo(host, s_port, hints, out_addr);
+
+	// Get to the tail of the list
+	ai_tail = *out_addr;
+	while (ai_tail->ai_next)
+		ai_tail = ai_tail->ai_next;
+
+	return getaddrinfo(host, s_port, hints, &ai_tail->ai_next);
+}
+
 // we can't provide a portable way of respecting a DNS timeout
 static int resolve(int family, int flags, const char *host, uint16_t port, struct addrinfo **out_addr)
 {
 	struct addrinfo hints = {
 		.ai_family = family,
-#ifdef _WIN32
-		// It looks like on Windows 0 is not a valid option here.
-		// see https://learn.microsoft.com/en-us/windows/win32/api/ws2def/ns-ws2def-addrinfoa
-		// TODO: On Windows, do two calls to getaddrinfo (for TCP and UDP) and merge the results.
-		//       Alternatively, consider splitting caches by TCP and UDP addresses.
-		.ai_socktype = SOCK_STREAM,
-#else
 		.ai_socktype = 0,
-#endif
 		.ai_flags = AI_ADDRCONFIG | flags
 	};
+	int ret;
+	char s_port[NI_MAXSERV];
 
-	if (port) {
-		char s_port[NI_MAXSERV];
 
+	*out_addr = NULL;
+
+	if (port) {
 		hints.ai_flags |= AI_NUMERICSERV;
 
 		wget_snprintf(s_port, sizeof(s_port), "%hu", port);
 		debug_printf("resolving %s:%s...\n", host ? host : "", s_port);
-		return getaddrinfo(host, s_port, &hints, out_addr);
 	} else {
 		debug_printf("resolving %s...\n", host);
-		return getaddrinfo(host, NULL, &hints, out_addr);
 	}
+
+	/*
+	 * .ai_socktype = 0, which would give us all the available socket types,
+	 * is not a valid option on Windows. Hence, we call getaddrinfo() twice with SOCK_STREAM
+	 * and SOCK_DGRAM, and merge the two lists.
+	 * See: https://learn.microsoft.com/en-us/windows/win32/api/ws2def/ns-ws2def-addrinfoa
+	 */
+	hints.ai_socktype = SOCK_STREAM;
+	if ((ret = getaddrinfo_merging(host, port ? s_port : NULL, &hints, out_addr)) != 0)
+		goto end;
+
+	hints.ai_socktype = SOCK_DGRAM;
+	if ((ret = getaddrinfo_merging(host, port ? s_port : NULL, &hints, out_addr)) != 0)
+		goto end;
+
+	return 0;
+
+end:
+	if (*out_addr)
+		freeaddrinfo(*out_addr);
+	return ret;
 }
 
 /**
-- 
GitLab


From 3e4c9bf8a6d693798830e3ba4ef2adab56d0ad69 Mon Sep 17 00:00:00 2001
From: Ander Juaristi <a@juaristi.eus>
Date: Sun, 3 Sep 2023 01:12:05 +0200
Subject: [PATCH 2/2] fuzz: Fix http_client fuzzer

Properly free the addrinfo structs, assuming there could be more than
one.
---
 fuzz/libwget_http_client_fuzzer.c | 9 ++++++++-
 1 file changed, 8 insertions(+), 1 deletion(-)

diff --git a/fuzz/libwget_http_client_fuzzer.c b/fuzz/libwget_http_client_fuzzer.c
index 2d17569fa..ae1c972b2 100644
--- a/fuzz/libwget_http_client_fuzzer.c
+++ b/fuzz/libwget_http_client_fuzzer.c
@@ -74,8 +74,15 @@ int getaddrinfo(const char *node, const char *service, const struct addrinfo *hi
 }
 void freeaddrinfo(struct addrinfo *res)
 {
+	struct addrinfo *ai, *cur;
 	if (fuzzing) {
-		wget_free(res);
+		ai = res;
+		while (ai) {
+			// wget_free(res);
+			cur = ai;
+			ai = ai->ai_next;
+			wget_free(cur);
+		}
 		return;
 	}
 
-- 
GitLab

