We don't have RLIMIT_MEMLOCK, but the code appears to not be vital
so just skip it.

We need a Solaris implementation of determineFileSystemTypeImpl.

--- a/src/lib/caching/ksdcmapping_p.h	Fri Feb  7 14:00:26 2025
+++ b/src/lib/caching/ksdcmapping_p.h	Sun Mar  9 14:31:02 2025
@@ -191,23 +191,6 @@
             // the size to be able to access every entry, so fixup the mapping.
             if (mapAddress != MAP_FAILED) {
                 // Successful mmap doesn't actually mean that whole range is readable so ensure it is
-                struct rlimit memlock;
-                if (getrlimit(RLIMIT_MEMLOCK, &memlock) == 0 && memlock.rlim_cur >= 2) {
-                    // Half of limit in case something else has already locked some mem
-                    uint lockSize = qMin(memlock.rlim_cur / 2, (rlim_t)size);
-                    // Note that lockSize might be less than what we need to mmap
-                    // and so this doesn't guarantee that later parts will be readable
-                    // but that's fine, at least we know we will succeed here
-                    if (mlock(mapAddress, lockSize)) {
-                        throw KSDCCorrupted(QLatin1String("Cache is inaccessible ") + file->fileName());
-                    }
-                    if (munlock(mapAddress, lockSize) != 0) {
-                        qCDebug(KCOREADDONS_DEBUG) << "Failed to munlock!";
-                    }
-                } else {
-                    qCWarning(KCOREADDONS_DEBUG) << "Failed to get RLIMIT_MEMLOCK!";
-                }
-
                 SharedMemory *mapped = reinterpret_cast<SharedMemory *>(mapAddress);
 
                 // First make sure that the version of the cache on disk is
--- a/src/lib/io/kfilesystemtype.cpp	Fri Feb  7 14:00:26 2025
+++ b/src/lib/io/kfilesystemtype.cpp	Sun Mar  9 14:38:36 2025
@@ -75,6 +75,19 @@
     return kde_typeFromName(buf.f_fstypename);
 }
 
+#elif defined(Q_OS_SOLARIS)
+#include <sys/types.h>
+#include <sys/statvfs.h>
+
+KFileSystemType::Type determineFileSystemTypeImpl(const QByteArray &path)
+{
+    struct statvfs buf;
+    if (statvfs(path.constData(), &buf) != 0) {
+        return KFileSystemType::Unknown;
+    }
+    return kde_typeFromName(buf.f_basetype);
+}
+
 #elif defined(Q_OS_LINUX) || defined(Q_OS_HURD)
 #include <sys/statfs.h>
 
