#!/usr/bin/python3.11

# {{{ CDDL HEADER
#
# This file and its contents are supplied under the terms of the
# Common Development and Distribution License ("CDDL"), version 1.0.
# You may only use this file in accordance with the terms of version
# 1.0 of the CDDL.
#
# A full copy of the text of the CDDL should have accompanied this
# source. A copy of the CDDL is also available via the Internet at
# http://www.illumos.org/license/CDDL.
#
# }}}

# Copyright 2021 OmniOS Community Edition (OmniOSce) Association.
# Copyright 2022 Peter Tribble

import getopt
import logging
import os
import re
import shutil
import subprocess
import sys
import tempfile
import time
import yaml
import xml.etree.ElementTree as etree
from pprint import pprint, pformat

xmlfile = '/etc/zone.xml'
uuidfile = '/etc/uuid'
testmode = False

try:
    opts, args = getopt.getopt(sys.argv[1:], "tx:u:")
except getopt.GetoptError:
    print("init [-t] [-x <xml file>] [-u <uuid file>]")
    sys.exit(2)
for opt, arg in opts:
    if opt == '-t':
        testmode = True
    elif opt == '-x':
        xmlfile = arg
    elif opt == '-u':
        uuidfile = arg

if testmode:
    logging.basicConfig(stream=sys.stdout, level=logging.DEBUG)
else:
    logging.basicConfig(filename='/tmp/init.log', filemode='a',
        level=logging.DEBUG)

# Default values
opts = {
    'acpi':         'on',
    'bootorder':    'cd',
    'bootrom':      'BHYVE_RELEASE_CSM',
    'cloud-init':   'off',
    'console':      '/dev/zconsole',
    'diskif':       'virtio-blk',
    'extra':        '',
    'hostbridge':   'i440fx',
    'netif':        'virtio-net-viona',
    'ram':          '1G',
    'type':         'generic',
    'vcpus':        '1',
    'vnc':          'off',
    'xhci':         '',
}

aliases = {
    'diskif': {
        'virtio':       'virtio-blk',
        'ahci':         'ahci-hd',
    },
    'netif': {
        'virtio':       'virtio-net-viona',
    },
    'hostbridge': {
        # Was wrongly used in some older scripts.
        'intel':        'netapp',
    },
    'vnc': {
        'on':   'unix=/tmp/vm.vnc',
        'wait': 'wait,unix=/tmp/vm.vnc',
    },
    'bootrom': {
        # These old firmware files were present before r151035. Provide aliases
        # for backwards compatibility.
        'BHYVE_DEBUG-2.70':         'BHYVE_DEBUG',
        'BHYVE_DEBUG_CSM-2.40':     'BHYVE_DEBUG_CSM',
        'BHYVE_RELEASE-2.70':       'BHYVE_RELEASE',
        'BHYVE_RELEASE_CSM-2.40':   'BHYVE_RELEASE_CSM',
    }
}

HOSTBRIDGE_SLOT = 0
LPC_SLOT        = 1
CDROM_SLOT      = 3
BOOTDISK_SLOT   = 4
DISK_SLOT       = 5
NET_SLOT        = 6
CDROM_SLOT2     = 7
DISK_SLOT2      = 8
PPT_SLOT        = 9
RNG_SLOT        = 10
VIRTFS_SLOT     = 11
CINIT_SLOT      = 29
VNC_SLOT        = 30
LPC_SLOT_WIN    = 31

try:
    with open(uuidfile) as file:
        uuid = file.read().strip()
        logging.info('Zone UUID: {0}'.format(uuid))
except:
    uuid = None

def fatal(msg):
    logging.error(msg)
    print(msg, file=sys.stderr)
    sys.exit(1)

if not os.path.isfile(xmlfile):
    fatal(f'Cannot find zone XML file at {xmlfile}')

try:
    cfg = etree.parse(xmlfile)
except:
    fatal(f'Could not parse {xmlfile}')

root = cfg.getroot()
logging.info('Parsed {0}'.format(xmlfile))

name = root.get('name')
zonepath = root.get('zonepath')
zoneroot = f'{zonepath}/root'

##############################################################################

def boolv(s, var, ignore=False):
    if s in ['true', 'yes', 'on', '1']:
        return True
    if s in ['false', 'no', 'off', '0']:
        return False
    if not ignore:
        fatal(f'Invalid value {s} for boolean variable {var}')
    return None

def opt(tag):
    global opts, root
    try:
        el = root.find('./attr[@name="{0}"]'.format(tag))
        opts[tag] = el.get('value').strip()
        logging.debug('Found custom {0} attribute - "{1}"'
            .format(tag, opts[tag]))
        if tag in aliases:
            try:
                opts[tag] = aliases[tag][opts[tag]]
                logging.debug('  Alias expanded to {0}'.format(opts[tag]))
            except KeyError:
                pass
    except:
        pass

def diskpath(arg):
    if arg.startswith('/dev'):
        return arg
    return '/dev/zvol/rdsk/{0}'.format(arg)

# Look for attributes of the form <type> or <type>N and generate a list.
def build_devlist(type, maxval):
    devlist = {}
    for dev in root.findall('./attr[@name]'):
        m = re.search(rf'^{type}(\d+)$', dev.get('name').strip())
        if not m: continue
        k = int(m.group(1))
        if k in devlist:
            logging.error(
                '{}{} appears more than once in configuration'.format(type, k))
            sys.exit(1)
        if (k > maxval):
            logging.error('{}{} slot out of range'.format(type, k))
            sys.exit(1)
        devlist[k] = dev.get('value').strip()

    # Now insert plain <type> tags into the list, using available slots in order
    avail = sorted(set(range(0, maxval)).difference(sorted(devlist.keys())))
    for dev in root.findall(f'./attr[@name="{type}"]'):
        try:
            k = avail.pop(0)
        except IndexError:
            logging.error('{}: no more available slots'.format(type))
            sys.exit(1)
        devlist[k] = dev.get('value').strip()

    logging.debug('{} list: \n{}'.format(type, pformat(devlist)))

    return devlist

def build_cloudinit_image(uuid, src):
    logging.info('Generating cloud-init data')

    #### Metadata

    meta_data = {
        'instance-id':      uuid,
        'local-hostname':   name,
    }

    #### Userdata

    user_data = {
        'hostname':         name,
        'disable_root':     False,
    }

    def file_or_string(f):
        if os.path.isabs(f) and os.path.isfile(f):
            try:
                with open(f) as fh:
                    f = fh.read()
            except Exception as e:
                fatal(f'Could not read from {f}: {e}')
        return f.strip()

    if (v := root.find('./attr[@name="password"]')) is not None:
        user_data['password'] = file_or_string(v.get('value'))
        user_data['chpasswd'] = { 'expire': False }
        user_data['ssh-pwauth'] = True

    if (v := root.find('./attr[@name="sshkey"]')) is not None:
        v = file_or_string(v.get('value'))
        user_data['ssh_authorized_keys'] = [v]
        user_data['users'] = [
            'default',
            {'name': 'root', 'ssh_authorized_keys': [v]}
        ]

    #### Network

    network_data = {}

    addresses = root.findall('./network[@allowed-address]')
    if addresses is not None:
        nsdone = False
        network_data['version'] = 2
        network_data['ethernets'] = {}

        for a in addresses:
            vnic = a.get('physical')
            addr = a.get('allowed-address')
            rtr = a.get('defrouter')

            p = subprocess.run([ '/usr/sbin/dladm',
                'show-vnic', '-p', '-o', 'MACADDRESS', vnic ],
                capture_output=True, text=True)
            if p.returncode != 0:
                logging.warning(f'Could not find MAC address for VNIC {vnic}')
                continue
            mac = p.stdout.strip()
            mac = ':'.join(l.zfill(2) for l in mac.split(':'))

            data = {
                'match':        { 'macaddress': mac },
                'set-name':     vnic,
                'addresses':    [addr],
            }
            if rtr:
                data['gateway4'] = rtr

            if not nsdone:
                domain = root.find('./attr[@name="dns-domain"]')
                resolvers = root.find('./attr[@name="resolvers"]')
                if resolvers is not None or domain is not None:
                    nsdata = {}
                    if domain is not None:
                        nsdata['search'] = [domain.get('value').strip()]
                    if resolvers is not None:
                        nsdata['addresses'] = \
                            resolvers.get('value').strip().split(',')
                    data['nameservers'] = nsdata
                nsdone = True

            network_data['ethernets'][vnic] = data

    logging.debug('Metadata:\n' + yaml.dump(meta_data))
    logging.debug('Userdata:\n' + yaml.dump(user_data))
    logging.debug('Netdata:\n' + yaml.dump(network_data))

    if testmode:
        return

    dir = tempfile.mkdtemp(dir=f'/', prefix='cloud-init.')

    with open(f'{dir}/meta-data', 'w') as fh:
        yaml.dump(meta_data, fh)

    if os.path.isabs(src) and os.path.isfile(src):
        logging.info(f'Using supplied cloud-init user-data file from {src}')
        shutil.copyfile(src, f'{dir}/user-data')
    else:
        with open(f'{dir}/user-data', 'w') as fh:
            fh.write('#cloud-config\n')
            yaml.dump(user_data, fh)

    if network_data:
        with open(f'{dir}/network-config', 'w') as fh:
            yaml.dump(network_data, fh)

    #### Build image

    cidir = f'/cloud-init'
    seed = f'/cloud-init.iso'
    if os.path.exists(cidir):
        shutil.rmtree(cidir)
    os.rename(dir, cidir)
    logging.info('Building cloud-init ISO image')
    try:
        subprocess.run([
            '/usr/bin/mkisofs',
            '-full-iso9660-filenames',
            '-untranslated-filenames',
            '-rock',
            '-volid', 'CIDATA',
            '-o', seed,
            cidir
        ], capture_output=False)
        os.chmod(seed, mode=0o644)
    except Exception as e:
        fatal(f'Could not create cloud-init ISO image: {e}')

##############################################################################

for tag in opts.keys():
    opt(tag)

if opts['type'] == 'windows':
    # See https://wiki.freebsd.org/bhyve/Windows
    # ... There are currently some slot limitations with UEFI:
    # ... - AHCI devices must be in slots 3/4/5/6
    # ... - The PCI-ISA bus aka lpc must be in slot 31
    logging.info('Adjusting LPC PCI slot for windows')
    LPC_SLOT = LPC_SLOT_WIN

# At present, moving the CDROM to after the hard disks is the only way we
# have of changing the boot order. This will hopefully improve in the
# future once we get persistent bootrom variables.
if opts['bootorder'].startswith('c') and opts['type'] != 'windows':
    CDROM_SLOT = CDROM_SLOT2

args = ['/usr/sbin/bhyve']

if boolv(opts['cloud-init'], 'cloud-init', ignore=True) is not False:
    if opts['cloud-init'].startswith(('http://', 'https://')):
        ser = 'ds=nocloud-net;s={};i={}'.format(opts['cloud-init'], uuid)
    else:
        build_cloudinit_image(uuid, opts['cloud-init'])
        ser = f'ds=nocloud;i={uuid}'
        args.extend([
            '-s', '{0}:0,ahci-cd,/cloud-init.iso,ro'.format(CINIT_SLOT)
        ])

if opts['type'] == 'openbsd':
    logging.info('Ignoring unknown MSRs for OpenBSD')
    args.append('-w')

if uuid:
    args.extend(['-U', uuid])

# The ACPI option has no effect with illumos bhyve
#if boolv(opts['acpi'], 'acpi'):
#    args.append('-A')

args.extend([
    '-H',
    '-B', '1,manufacturer={},product={},version={},serial={},sku={},family={}'
        .format('Tribblix', 'Tribblix HVM', '1.0', uuid, '001', 'Virtual Machine'),
    '-c', opts['vcpus'],
    '-m', opts['ram'],
])

# Bootrom

if opts['bootrom'].find('/') == -1:
    opts['bootrom'] = '/usr/share/bhyve/firmware/{0}'.format(opts['bootrom'])
if not opts['bootrom'].endswith('.fd'):
    opts['bootrom'] += '.fd'
args.extend(['-l', 'bootrom,{0}'.format(opts['bootrom'])])

# Host bridge

if opts['hostbridge'] == 'none':
    pass
elif opts['hostbridge'] == 'amd':
    args.extend(['-s', '{0},amd_hostbridge'.format(HOSTBRIDGE_SLOT)])
elif '=' in opts['hostbridge']:
    args.extend(['-s', '{0},hostbridge,{1}'.format(
        HOSTBRIDGE_SLOT, opts['hostbridge'])])
else:
    args.extend(['-s', '{0},hostbridge,model={1}'.format(
        HOSTBRIDGE_SLOT, opts['hostbridge'])])

# LPC

args.extend(['-s', '{0},lpc'.format(LPC_SLOT)])

# Console

args.extend(['-l', 'com1,' + opts['console']])

# CDROM

for i, v in build_devlist('cdrom', 10).items():
    args.extend([
        '-s', '{0}:{1},{2},{3}'.format(CDROM_SLOT, i, 'ahci-cd', v)
    ])

# Bootdisk

try:
    bootdisk = root.find('./attr[@name="bootdisk"]')
    args.extend([
        '-s', '{0}:0,{1},{2}'.format(BOOTDISK_SLOT, opts['diskif'],
            diskpath(bootdisk.get('value').strip()))
    ])
except:
    pass

# Additional Disks
for i, v in build_devlist('disk', 20).items():
    if i < 10:
        args.extend([
            '-s', '{0}:{1},{2},{3}'.format(DISK_SLOT, i, opts['diskif'],
            diskpath(v))
        ])
    else:
        args.extend([
            '-s', '{0}:{1},{2},{3}'.format(DISK_SLOT2, i - 10, opts['diskif'],
            diskpath(v))
        ])

# Network

i = 0
for f in root.findall('./network[@physical]'):
    ifname = f.get('physical').strip()
    mask = f.find("./net-attr[@name='feature_mask']")
    netif = f.find("./net-attr[@name='netif']")

    net_extra = ''
    netif = netif.get('value') if netif is not None else opts['netif']

    if mask is not None:
        net_extra += ',feature_mask={}'.format(mask.get('value'))

    args.extend([
        '-s', '{0}:{1},{2},{3}{4}'
        .format(NET_SLOT, i, netif, ifname, net_extra)
    ])
    i += 1

# VNC

if len(opts['vnc']) and opts['vnc'] != 'off':
    args.extend(['-s', '{0}:0,fbuf,vga=off,{1}'.format(VNC_SLOT, opts['vnc'])])
    if not len(opts['xhci']) or opts['xhci'] != 'off':
        args.extend(['-s', '{0}:1,xhci,tablet'.format(VNC_SLOT)])

# Pass-through devices not yet implemented

# virtio-9p devices

for i, v in build_devlist('virtfs', 8).items():
    # Expect <sharename>,<path>[,ro]
    arr = v.split(',')
    vfsopts = ''
    if len(arr) == 3:
        if arr[2] != 'ro':
            fatal(f'Unknown virtfs attribute {arr[2]}')
        vfsopts = ',ro'
    elif len(arr) != 2:
        fatal(f'Bad virtfs specification: {v}')
    args.extend(['-s', '{0}:{1},virtio-9p,{2}={3}{4}'.format(
        VIRTFS_SLOT, i, arr[0], arr[1], vfsopts)])

# Extra options

if len(opts['extra']):
    args.extend(opts['extra'].split(' '))

# VM name

name = root.get('name')
args.append(name)

logging.info('Final arguments: {0}'.format(pformat(args)))
logging.info('{0}'.format(' '.join(args)))

if testmode:
    sys.exit(0)

if not os.path.exists('/dev/vmmctl'):
    logging.info('No kernel support for bhyve')
    sys.exit(0)

if os.path.exists('/dev/vmm/{0}'.format(name)):
    logging.info('Destroying old bhyve instance')
    subprocess.run(['/usr/sbin/bhyvectl', '--vm={0}'.format(name), '--destroy'])

while True:
    logging.info('Starting bhyve')
    ret = subprocess.run(args, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    logging.info("Bhyve exited {0}".format(ret.returncode))
    logging.error("Error {0}".format(ret.stderr))
    logging.debug("Output {0}".format(ret.stdout))
    # 0 - rebooted
    # 1 - powered off
    # 2 - halted
    # 3 - triple fault
    # 4 - other error
    if ret.returncode != 0: break

# Vim hints
# vim:ts=4:sw=4:et:fdm=marker
