#!/bin/sh
#
# SPDX-License-Identifier: CDDL-1.0
#
# {{{ CDDL HEADER
#
# This file and its contents are supplied under the terms of the
# Common Development and Distribution License ("CDDL"), version 1.0.
# You may only use this file in accordance with the terms of version
# 1.0 of the CDDL.
#
# A full copy of the text of the CDDL should have accompanied this
# source. A copy of the CDDL is also available via the Internet at
# http://www.illumos.org/license/CDDL.
#
# }}}
#
# Copyright 2024 Peter Tribble
#

#
# unpack a source tarball, optionally creating a 64-bit build directory
# as well
#
# if a patchlist is found, apply patches from it
#
THOME=${THOME:-/packages/localsrc/Tribblix}

SRCDIR="${THOME}/tarballs"
PATCHDIR="${THOME}/build/patches"
CHECKSUMFILE="${THOME}/build/checksums.txt"

UNZIP="/usr/bin/unzip"
GPATCH="/usr/bin/gpatch"

#
# options:
# none - only 32-bit, delete 64-bit
# +32 - only 32-bit, but don't delete 64-bit
# -64 - both 32-bit and 64-bit
# +64 - only 64-bit
#
DO32="true"
DO64="false"
RM32="true"
RM64="true"
case $1 in
+32)
	RM64="false"
	shift
	;;
-64)
	DO64="true"
	shift
	;;
+64)
	DO32="false"
	DO64="true"
	shift
	;;
esac

while getopts "b:n:" opt; do
    case $opt in
    b)
	BRANCHARGS="-b $OPTARG"
	shift
	shift
	;;
    n)
	upkg=${OPTARG}
	shift
	shift
	;;
    esac
done

case $# in
1)
	pkg=$1
	;;
*)
	echo "Usage: $0 [+32|-64|+64] [-b branch] [-n dirname] filename"
	exit 1
	;;
esac

#
# there are 2 names we are interested in, the name of the tarball, and
# the directory it unpacks into
#
# ideally these are the same, but some sources don't follow that very
# sensible convention, and in that case give the name of the unpacked
# directory with -n, and we'll rename it here to match the tarball name
#
# but if the arguments we're given are the same, then that won't work
# because we would then be renaming something to itself
#
if [ "x${pkg}" = "x${upkg}" ]; then
    echo "ERROR: -n name must differ from primary name"
    exit 1
fi

#
# we create a checksum of the file we're unpacking
# if the file is listed in the checksum list, we compare the checksum
# we've calculated and exit fatally if there's a mismatch
# if the file isn't listed, we add it
#
dochecksum() {
    #
    # we're passed the full name, strip off the directory portion
    #
    FNAME=${1##*/}
    CKSAVE=$(grep "^${FNAME} " ${CHECKSUMFILE} | awk '{print $2}')
    CKNOW=$(openssl sha256  "$1" | awk '{print $NF}')
    if [ -n "${CKSAVE}" ]; then
	if [ "${CKSAVE}" != "${CKNOW}" ]; then
	    echo "ERROR: checksum mismatch for ${1}"
	    exit 1
	fi
    else
	echo "$FNAME ${CKNOW}" >> ${CHECKSUMFILE}
    fi
}

dopatch() {
  if [ -f ${PATCHDIR}/${1}.pls ]; then
      cd ${1}
      cat ${PATCHDIR}/${1}.pls | while read patcharg patchfile
      do
	  ${GPATCH} ${patcharg/+/ } -i ${PATCHDIR}/${patchfile}
      done
      cd ..
  fi
  if [ -f ${PATCHDIR}/${1}.pls.`uname -p` ]; then
      cd ${1}
      cat ${PATCHDIR}/${1}.pls.`uname -p` | while read patcharg patchfile
      do
	  ${GPATCH} ${patcharg/+/ } -i ${PATCHDIR}/${patchfile}
      done
      cd ..
  fi
}

#
# delete old copies
#
if [ "x$RM32" != "xfalse" ]; then
    /usr/bin/rm -fr ${pkg}
fi
if [ "x$RM64" != "xfalse" ]; then
    /usr/bin/rm -fr ${pkg}-64bit
fi
#
# and for the unpacked name, if there is one
#
if [ -n "${upkg}" ]; then
    if [ "x$RM32" != "xfalse" ]; then
	/usr/bin/rm -fr ${upkg}
    fi
    if [ "x$RM64" != "xfalse" ]; then
	/usr/bin/rm -fr ${upkg}-64bit
    fi
fi
DONEUNPACK=""

#
# try various sources, first tarballs of various compressed forms
# then zip, then a git repo
#
# if given an alternate name, move that to the primary name
#
for filetype in \
    '.tar.Z' \
	'.tar.gz' \
	'.tgz' \
	'.src.tgz' \
	'.src.tar.gz' \
	'.tar.bz2' \
	'.tbz' \
	'-source.tar.bz2' \
	'.tar.xz' \
	'.source.tar.xz' \
	'.tar.lz' \
	'.tar'
do
    if [ -f ${SRCDIR}/${pkg}${filetype} ]; then
	dochecksum ${SRCDIR}/${pkg}${filetype}
	if [ -n "${DONEUNPACK}" ]; then
	    echo "ERROR: multiple $pkg sources $DONEUNPACK and $filetype"
	fi
        gtar axf ${SRCDIR}/${pkg}${filetype}
	if [ -n "${upkg}" ]; then
	    mv ${upkg} ${pkg}
	fi
        dopatch ${pkg}
        if [ "x$DO64" != "xfalse" ]; then
            mv ${pkg} ${pkg}-64bit
            if [ "x$DO32" != "xfalse" ]; then
                gtar axf ${SRCDIR}/${pkg}${filetype}
		if [ -n "${upkg}" ]; then
		    mv ${upkg} ${pkg}
		fi
                dopatch ${pkg}
            fi
        fi
	DONEUNPACK="$filetype"
    fi
done

if [ -f ${SRCDIR}/${pkg}.zip ]; then
    dochecksum ${SRCDIR}/${pkg}.zip
    if [ -n "${DONEUNPACK}" ]; then
     	echo "ERROR: multiple $pkg sources $DONEUNPACK and .zip"
    fi
    ${UNZIP} -q ${SRCDIR}/${pkg}.zip
    if [ -n "${upkg}" ]; then
	mv ${upkg} ${pkg}
    fi
    dopatch ${pkg}
    if [ "x$DO64" != "xfalse" ]; then
	mv ${pkg} ${pkg}-64bit
	if [ "x$DO32" != "xfalse" ]; then
	    ${UNZIP} -q ${SRCDIR}/${pkg}.zip
	    if [ -n "${upkg}" ]; then
		mv ${upkg} ${pkg}
	    fi
	    dopatch ${pkg}
	fi
    fi
fi

#
# we don't do alternate names for git repos, because
# the problem doesn't arise
#
case $pkg in
    https://*)
	spkg=${pkg##*/}
	spkg=${spkg%.git}
	/usr/bin/rm -fr ${spkg} ${spkg}-64bit
	git clone $BRANCHARGS $pkg
	dopatch ${spkg}
	if [ "x$DO64" != "xfalse" ]; then
	    mv ${spkg} ${spkg}-64bit
	    if [ "x$DO32" != "xfalse" ]; then
		git clone $BRANCHARGS $pkg
		dopatch ${spkg}
	    fi
	fi
	;;
esac
