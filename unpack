#!/bin/sh
#
# {{{ CDDL HEADER
#
# This file and its contents are supplied under the terms of the
# Common Development and Distribution License ("CDDL"), version 1.0.
# You may only use this file in accordance with the terms of version
# 1.0 of the CDDL.
#
# A full copy of the text of the CDDL should have accompanied this
# source. A copy of the CDDL is also available via the Internet at
# http://www.illumos.org/license/CDDL.
#
# }}}
#
# Copyright 2023 Peter Tribble
#

#
# unpack a source tarball, optionally creating a 64-bit build directory
# as well
#
# if a patchlist is found, apply patches from it
#
THOME=${THOME:-/packages/localsrc/Tribblix}

SRCDIR="${THOME}/tarballs"
PATCHDIR="${THOME}/build/patches"

GZCAT="/usr/bin/gzcat"
BZCAT="/usr/bin/bzcat"
XZCAT="/usr/bin/xz"
UNZIP="/usr/bin/unzip"
GPATCH="/usr/bin/gpatch"
ZCAT="/usr/bin/zcat"
LZIP="/usr/bin/lzip"

#
# options:
# none - only 32-bit, delete 64-bit
# +32 - only 32-bit, but don't delete 64-bit
# -64 - both 32-bit and 64-bit
# +64 - only 32-bit
#
DO32="true"
DO64="false"
RM32="true"
RM64="true"
case $1 in
+32)
	RM64="false"
	shift
	;;
-64)
	DO64="true"
	shift
	;;
+64)
	DO32="false"
	DO64="true"
	shift
	;;
esac

while getopts "b:" opt; do
    case $opt in
    b)
	BRANCHARGS="-b $OPTARG"
	shift
	shift
	;;
    esac
done

dopatch() {
  if [ -f ${PATCHDIR}/${1}.pls ]; then
      cd ${1}
      cat ${PATCHDIR}/${1}.pls | while read patcharg patchfile
      do
	  ${GPATCH} ${patcharg/+/ } -i ${PATCHDIR}/${patchfile}
      done
      cd ..
  fi
  if [ -f ${PATCHDIR}/${1}.pls.`uname -p` ]; then
      cd ${1}
      cat ${PATCHDIR}/${1}.pls.`uname -p` | while read patcharg patchfile
      do
	  ${GPATCH} ${patcharg/+/ } -i ${PATCHDIR}/${patchfile}
      done
      cd ..
  fi
}

for pkg in "$@"
do
        if [ "x$RM32" != "xfalse" ]; then
            /usr/bin/rm -fr ${pkg}
	fi
        if [ "x$RM64" != "xfalse" ]; then
            /usr/bin/rm -fr ${pkg}-64bit
	fi
	DONEUNPACK=""

	for filetype in \
			'.tar.Z' \
			'.tar.gz' \
			'.tgz' \
			'.src.tgz' \
			'.src.tar.gz' \
			'.tar.bz2' \
			'.tbz' \
			'-source.tar.bz2' \
			'.tar.xz' \
			'.source.tar.xz' \
			'.tar.lz' \
			'.tar'
        do
           if [ -f ${SRCDIR}/${pkg}${filetype} ]; then
	      if [ -n "${DONEUNPACK}" ]; then
		 echo "ERROR: multiple $pkg sources $DONEUNPACK and $filetype"
	      fi
              gtar axf ${SRCDIR}/${pkg}${filetype}
              dopatch ${pkg}
              if [ "x$DO64" != "xfalse" ]; then
                 mv ${pkg} ${pkg}-64bit
                 if [ "x$DO32" != "xfalse" ]; then
                     gtar axf ${SRCDIR}/${pkg}${filetype}
                     dopatch ${pkg}
                 fi
              fi
	      DONEUNPACK="$filetype"
           fi
        done

	if [ -f ${SRCDIR}/${pkg}.zip ]; then
	   if [ -n "${DONEUNPACK}" ]; then
     	      echo "ERROR: multiple $pkg sources $DONEUNPACK and .zip"
	   fi
	   ${UNZIP} -q ${SRCDIR}/${pkg}.zip
	   dopatch ${pkg}
	   if [ "x$DO64" != "xfalse" ]; then
	      mv ${pkg} ${pkg}-64bit
	      if [ "x$DO32" != "xfalse" ]; then
		  ${UNZIP} -q ${SRCDIR}/${pkg}.zip
		  dopatch ${pkg}
	      fi
	   fi
	fi

	case $pkg in
	    https://*)
		spkg=${pkg##*/}
		spkg=${spkg%.git}
		/usr/bin/rm -fr ${spkg} ${spkg}-64bit
		git clone $BRANCHARGS $pkg
		dopatch ${spkg}
		if [ "x$DO64" != "xfalse" ]; then
		    mv ${spkg} ${spkg}-64bit
		    if [ "x$DO32" != "xfalse" ]; then
			git clone $BRANCHARGS $pkg
			dopatch ${spkg}
		    fi
		fi
		;;
	esac
done
