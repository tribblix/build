#!/bin/sh
#
# package something that's a python wheel, into the right place
# in the matching python hierarchy
#
STD_ROOT="usr/versions"

case $# in
2)
        WFILE="$2"
        PKGNAME="$1"
	;;
*)
	echo "Usage: $0 pkg_name wheel_file"
	exit 1
	;;
esac

#
# Default locations
#
THOME=${THOME:-/packages/localsrc/Tribblix}
BUILD="${THOME}/build"
BROOT="/tmp/pct"

#
# verify that our arguments refer to a package and to a wheel
#
if [ ! -d $BUILD ]; then
   echo "ERROR: unable to find build directory $BUILD"
   exit 1
fi
if [ ! -f ${BUILD}/${PKGNAME}/pkginfo ]; then
   echo "ERROR: missing package data"
   echo "Please create ${BUILD}/${PKGNAME}/pkginfo"
   exit 1
fi
if [ ! -f ${WFILE} ]; then
    WFILE=${THOME}/tarballs/${WFILE}
fi
if [ ! -f ${WFILE} ]; then
    echo "Cannot find source wheel"
    exit 1
fi
     
if [ ! -d $BROOT ]; then
    mkdir -p $BROOT
fi
if [ ! -d $BROOT ]; then
   echo "ERROR: unable to find temporary directory $BROOT"
   exit 1
fi

#
# derive the python version from the package name
#
SPYVER=${PKGNAME##*-}
#
# we assume it has to be 3.X
#
case $SPYVER in
    37)
	PYVER=3.7
	;;
    39)
	PYVER=3.9
	;;
    310)
	PYVER=3.10
	;;
    311)
	PYVER=3.11
	;;
    *)
	echo "Unrecognised python version $SPYVER"
	exit 1
	;;
esac

echo $PYVER
#
# define and create working location
#
BDIR="${BROOT}/pkg.$$"
rm -fr ${BDIR}
mkdir -p ${BDIR}/${STD_ROOT}
cd ${BDIR}/${STD_ROOT}
mkdir -p python-${PYVER}/lib/python${PYVER}/site-packages
cd python-${PYVER}/lib/python${PYVER}/site-packages

#
# wheels are basically zip files
# the wheel command does a bit of extra validation
# and we compile any py files we find
#
unzip -q ${WFILE}
python${PYVER} -m py_compile `find . -name '*.py'`

${BUILD}/create_pkg ${PKGNAME} ${BDIR} ${BROOT}
cd /

# remove our temporary files
rm -fr ${BDIR}
rm -fr ${BROOT}/${PKGNAME}
