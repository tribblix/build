#!/bin/sh
#
# SPDX-License-Identifier: CDDL-1.0
#
# {{{ CDDL HEADER
#
# This file and its contents are supplied under the terms of the
# Common Development and Distribution License ("CDDL"), version 1.0.
# You may only use this file in accordance with the terms of version
# 1.0 of the CDDL.
#
# A full copy of the text of the CDDL should have accompanied this
# source. A copy of the CDDL is also available via the Internet at
# http://www.illumos.org/license/CDDL.
#
# }}}
#
# Copyright 2024 Peter Tribble
#

#
# fix environment
#
LC_ALL=C
export LC_ALL
TZ=UTC
export TZ

#
# package one or more python project(s) that use the new pep518 style, rather
# than the old setup.py mechanism
#

#
# Arguments
# -v - specify version of python (for packages that don't embed the python
#      version in the package name)
# -N - enables --no-build-isolation
#
XARGS=""
while getopts "v:N" opt; do
    case $opt in
	v)
	    SPYVER="$OPTARG"
	    ;;
	N)
	    XARGS="--no-build-isolation"
	    ;;
	*)
            echo "ERROR: invalid option $OPTARG"
            exit 1
            ;;
    esac
done
shift $((OPTIND-1))

case $# in
0|1)
	echo "Usage: $0 pkg_name tar_file"
	exit 1
	;;
*)
	PKGNAME="$1"
	shift
	;;
esac

#
# Default locations
#
THOME=${THOME:-/packages/localsrc/Tribblix}
BUILD="${THOME}/build"
BROOT="/tmp/pct"

#
# verify that our arguments refer to a package and to a wheel
#
if [ ! -d "$BUILD" ]; then
   echo "ERROR: unable to find build directory $BUILD"
   exit 1
fi
if [ ! -f "${BUILD}/${PKGNAME}/pkginfo" ]; then
   echo "ERROR: missing package data"
   echo "Please create ${BUILD}/${PKGNAME}/pkginfo"
   exit 1
fi

#
# sanity check to avoid messing up a repo
#
if [ -d .git ]; then
    echo "ERROR: cannot run in a git repo"
    exit 1
fi

if [ ! -d "$BROOT" ]; then
    mkdir -p "$BROOT"
fi
if [ ! -d "$BROOT" ]; then
   echo "ERROR: unable to find temporary directory $BROOT"
   exit 1
fi

#
# derive the python version from the package name, if we weren't given it
#
if [ -z "$SPYVER" ]; then
    SPYVER=${PKGNAME##*-}
fi
#
# we assume it has to be 3.X
#
case $SPYVER in
    311)
	PYVER=3.11
	;;
    312)
	PYVER=3.12
	;;
    *)
	echo "Unrecognised python version $SPYVER"
	exit 1
	;;
esac

#
# all pythons are 64-bit, so we must always set a 64-bit
# version of PKG_CONFIG_PATH
#
PKG_CONFIG_PATH=/usr/lib/$("${THOME}"/build/getarch)/pkgconfig
#
# if we want to add something to PKG_CONFIG_PATH
#
if [ -n "${TRIBBLIX_PKG_CONFIG_PATH}" ]; then
    PKG_CONFIG_PATH="${TRIBBLIX_PKG_CONFIG_PATH}:${PKG_CONFIG_PATH}"
fi
export PKG_CONFIG_PATH

#
# define and create working location
#
BDIR="${BROOT}/pkg.$$"
rm -fr ${BDIR}

#
# loop over arguments
#
for PFILE in "$@"
do
#
# unpack
#
"${BUILD}/unpack" "${PFILE}"
if [ ! -d "${PFILE}" ]; then
    echo "Missing source directory $PFILE"
    exit 1
fi
cd "${PFILE}" || exit 1
if [ ! -f pyproject.toml ]; then
    echo "No pyproject.toml, is this really a pep518 project?"
    exit 1
fi
#
# use pip to install
#
python${PYVER} -mpip install --no-deps --isolated --no-input --exists-action=a --disable-pip-version-check --no-warn-script-location --no-compile ${XARGS} --root="${BDIR}" -I .
cd ..
#
# end loop
#
done

#
# compile separately, to avoid install paths and timestamps ending up
# embedded in pyc files
#
# force unchecked-hash to ensure that nothing, even as root, will ever
# try to recompile and overwrite packaged pyc files
#
python${PYVER} -m compileall -f -p / -s "${BDIR}" --invalidation-mode unchecked-hash "${BDIR}/usr/versions/python-${PYVER}/lib/python${PYVER}/site-packages"

"${BUILD}/create_pkg" "${PKGNAME}" "${BDIR}" "${BROOT}"
cd /

# remove our temporary files
rm -fr "${BDIR}"
