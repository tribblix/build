#!/bin/ksh
#
# {{{ CDDL HEADER
#
# This file and its contents are supplied under the terms of the
# Common Development and Distribution License ("CDDL"), version 1.0.
# You may only use this file in accordance with the terms of version
# 1.0 of the CDDL.
#
# A full copy of the text of the CDDL should have accompanied this
# source. A copy of the CDDL is also available via the Internet at
# http://www.illumos.org/license/CDDL.
#
# }}}
#
# Copyright 2023 Peter Tribble
#

#
# package the files in a given directory
#
case $# in
3)
	PKGNAME="$1"
	BDIR="$2"
	BROOT="$3"
	;;
2)
	PKGNAME="$1"
	BDIR="$2"
	BROOT="/tmp/pct"
	;;
*)
	echo "Usage: $0 pkg_name tmp_dir [output_root]"
	exit 1
	;;
esac

#
# Default locations
#
THOME=${THOME:-/packages/localsrc/Tribblix}
BUILD="${THOME}/build"
MYARCH=$(uname -p)

#
# sanity check
#
if [ ! -d $BUILD ]; then
   echo "ERROR: unable to find build directory $BUILD"
   exit 1
fi
if [ ! -d $BROOT ]; then
   mkdir -p ${BROOT}
fi
if [ ! -d $BROOT ]; then
   echo "ERROR: unable to find temporary directory $BROOT"
   exit 1
fi
if [ ! -f ${BUILD}/${PKGNAME}/pkginfo ]; then
   echo "ERROR: missing package data"
   echo "Please create ${BUILD}/${PKGNAME}/pkginfo"
   exit 1
fi

#
# if there are services that should be restarted, add them to the postinstall
# script; this copied from ips2svr4
#
handle_restarts() {
if [ -f ${BDIR}/restart_fmri_list ]; then
mkdir -p ${BDIR}/install
if [ ! -f ${BDIR}/install/postinstall ]; then
cat > ${BDIR}/install/postinstall <<EOF
#!/sbin/sh
#
# Automatically generated service restart script
#
EOF
chmod a+x ${BDIR}/install/postinstall
echo "i postinstall=./install/postinstall" >> ${BDIR}/pp.$$
fi
if [ ! -f ${BDIR}/install/postremove ]; then
cat > ${BDIR}/install/postremove <<EOF
#!/sbin/sh
#
# Automatically generated service restart script
#
EOF
chmod a+x ${BDIR}/install/postremove
echo "i postremove=./install/postremove" >> ${BDIR}/pp.$$
fi
#
# this check is so we only actually restart if the install is to the
# current system. If we're installing to an alternate image, then the
# restarts will happen automatically when it boots
#
cat >> ${BDIR}/install/postinstall <<EOF
if [ "\${BASEDIR}" = "/" ]; then
EOF
cat >> ${BDIR}/install/postremove <<EOF
if [ "\${BASEDIR}" = "/" ]; then
EOF
/usr/bin/cat ${BDIR}/restart_fmri_list | /usr/bin/sort -u | /usr/bin/awk '{print "/usr/sbin/svcadm restart "$1}' >> ${BDIR}/install/postinstall
/usr/bin/cat ${BDIR}/restart_fmri_list | /usr/bin/sort -u | /usr/bin/awk '{print "/usr/sbin/svcadm restart "$1}' >> ${BDIR}/install/postremove
echo "fi" >> ${BDIR}/install/postinstall
echo "fi" >> ${BDIR}/install/postremove
#
# some of the packages have broken dependencies, so we exit cleanly to
# stop errors from missing services messing up pkgadd or pkgrm
#
echo "exit 0" >> ${BDIR}/install/postinstall
echo "exit 0" >> ${BDIR}/install/postremove
/usr/bin/rm ${BDIR}/restart_fmri_list
fi
}

#
# deal with users and groups
#
init_preinstall() {
if [ ! -f ${BDIR}/install/preinstall ]; then
mkdir -p ${BDIR}/install
cat > ${BDIR}/install/preinstall <<EOF
#!/sbin/sh
#
# Automatically generated preinstall script
#
EOF
echo "i preinstall=./install/preinstall" >> ${BDIR}/pp.$$
fi
}
close_preinstall() {
if [ -f ${BDIR}/install/preinstall ]; then
    echo "exit 0" >> ${BDIR}/install/preinstall
fi
}
do_group() {
    init_preinstall
    cat ${BUILD}/${PKGNAME}/group | while read gline
    do
	gname=`echo $gline|awk -F: '{print $1}'`
	cat >> ${BDIR}/install/preinstall <<EOF
if ! /usr/bin/grep -q "^${gname}:" \${BASEDIR}/etc/group
then
   echo "$gline" >> \${BASEDIR}/etc/group
fi
EOF
    done
}
do_passwd() {
    init_preinstall
    cat ${BUILD}/${PKGNAME}/passwd | while read pline
    do
	pname=`echo $pline|awk -F: '{print $1}'`
	cat >> ${BDIR}/install/preinstall <<EOF
if ! /usr/bin/grep -q "^${pname}:" \${BASEDIR}/etc/passwd
then
   echo "$pline" >> \${BASEDIR}/etc/passwd
   echo "${pname}:NP:::::::" >> \${BASEDIR}/etc/shadow
fi
EOF
    done
}
do_user_attr() {
    init_preinstall
    cat ${BUILD}/${PKGNAME}/user_attr | while read pline
    do
	pname=`echo $pline|awk -F: '{print $1}'`
	cat >> ${BDIR}/install/preinstall <<EOF
if ! /usr/bin/grep -q "^${pname}:" \${BASEDIR}/etc/user_attr
then
   echo "$pline" >> \${BASEDIR}/etc/user_attr
fi
EOF
    done
}

PKGVER=`/usr/bin/grep '^VERSION=' ${BUILD}/${PKGNAME}/pkginfo | /usr/bin/awk -F= '{print $2}' | /usr/bin/sed 's:"::g'`
cd $BDIR
# copy packaging files from archive
cp ${BUILD}/${PKGNAME}/pkginfo .
if [ -f ${BUILD}/${PKGNAME}/pkginfo.arch ]; then
    cat ${BUILD}/${PKGNAME}/pkginfo.arch >> pkginfo
else
    echo "ARCH=\"$MYARCH\"" >> pkginfo
fi
cat ${BUILD}/pkginfo.base >> pkginfo
echo "i pkginfo=./pkginfo" > pp.$$
#
# export BUILDROOT so the fixit script knows where to find stuff
#
BUILDROOT="${BUILD}"
export BUILDROOT
if [ -x ${BUILD}/${PKGNAME}/fixit ]; then
   echo "Fixing..."
   ${BUILD}/${PKGNAME}/fixit
fi
if [ -x ${BUILD}/fixit.default ]; then
   ${BUILD}/fixit.default
fi
#
# if 'allowstatic' exists, don't delete the static libs
#
if [ ! -f ${BUILD}/${PKGNAME}/allowstatic ]; then
   if [ -x ${BUILD}/fixit.static ]; then
      ${BUILD}/fixit.static
   fi
fi
# add dependencies
if [ -f ${BUILD}/${PKGNAME}/depend.${MYARCH} ]; then
   mkdir -p install
   cp ${BUILD}/${PKGNAME}/depend.${MYARCH} install/depend
   echo "i depend=./install/depend" >> pp.$$
elif [ -f ${BUILD}/${PKGNAME}/depend ]; then
   mkdir -p install
   cp ${BUILD}/${PKGNAME}/depend install
   echo "i depend=./install/depend" >> pp.$$
fi

#
# clean up any scripts from a previous run
#
rm -f ${BDIR}/install/postinstall
rm -f ${BDIR}/install/postremove
rm -f ${BDIR}/install/preremove
if [ -f ${BUILD}/${PKGNAME}/postinstall ]; then
    mkdir -p ${BDIR}/install
    cp ${BUILD}/${PKGNAME}/postinstall ${BDIR}/install
    chmod a+x ${BDIR}/install/postinstall
    echo "i postinstall=./install/postinstall" >> ${BDIR}/pp.$$
fi
if [ -f ${BUILD}/${PKGNAME}/postremove ]; then
    mkdir -p ${BDIR}/install
    cp ${BUILD}/${PKGNAME}/postremove ${BDIR}/install
    chmod a+x ${BDIR}/install/postremove
    echo "i postremove=./install/postremove" >> ${BDIR}/pp.$$
fi
if [ -f ${BUILD}/${PKGNAME}/preremove ]; then
    mkdir -p ${BDIR}/install
    cp ${BUILD}/${PKGNAME}/preremove ${BDIR}/install
    chmod a+x ${BDIR}/install/preremove
    echo "i preremove=./install/preremove" >> ${BDIR}/pp.$$
fi
if [ -f ${BUILD}/${PKGNAME}/restart_fmri_list ]; then
   cp ${BUILD}/${PKGNAME}/restart_fmri_list ${BDIR}
   handle_restarts
fi
#
# any class action scripts
#
if [ -f ${BUILD}/${PKGNAME}/cas_list ]; then
  for ifile in `cat ${BUILD}/${PKGNAME}/cas_list`
  do
      echo "i $ifile=install/$ifile" >> pp.$$
  done
fi
#
# deal with users and groups
#
rm -f ${BDIR}/install/preinstall
if [ -f ${BUILD}/${PKGNAME}/group ]; then
    do_group
fi
if [ -f ${BUILD}/${PKGNAME}/passwd ]; then
    do_passwd
fi
if [ -f ${BUILD}/${PKGNAME}/user_attr ]; then
    do_user_attr
fi
close_preinstall
#
if [ -d ${BDIR}/usr ]; then
   (cd ${BDIR} ; pkgproto usr | ${BUILD}/fixproto) >> pp.$$
fi
if [ -d ${BDIR}/etc ]; then
   (cd ${BDIR} ; pkgproto etc | ${BUILD}/fixproto) >> pp.$$
fi
if [ -d ${BDIR}/kernel ]; then
   (cd ${BDIR} ; pkgproto kernel | ${BUILD}/fixproto) >> pp.$$
fi
if [ -d ${BDIR}/lib ]; then
   (cd ${BDIR} ; pkgproto lib | ${BUILD}/fixproto) >> pp.$$
fi
if [ -d ${BDIR}/sbin ]; then
   (cd ${BDIR} ; pkgproto sbin | ${BUILD}/fixproto) >> pp.$$
fi
if [ -d ${BDIR}/var ]; then
   (cd ${BDIR} ; pkgproto var | ${BUILD}/fixproto) >> pp.$$
fi
if [ -d ${BDIR}/opt ]; then
   (cd ${BDIR} ; pkgproto opt | ${BUILD}/fixproto) >> pp.$$
fi
# zonelib is just for TRIBblix-zones
if [ -d ${BDIR}/zonelib ]; then
   (cd ${BDIR} ; pkgproto zonelib | ${BUILD}/fixproto) >> pp.$$
fi
# boot is just for TRIBsys-install-media-internal
if [ -d ${BDIR}/boot ]; then
   (cd ${BDIR} ; pkgproto boot | ${BUILD}/fixproto) >> pp.$$
fi
#
# any per-package proto fixes
#
if [ -x ${BUILD}/${PKGNAME}/fixproto ]; then
    mv pp.$$ old.pp.$$
    cat old.pp.$$ | ${BUILD}/${PKGNAME}/fixproto > pp.$$
    rm old.pp.$$
fi
# create the package
pkgmk -d ${BROOT} -f pp.$$ -r ${BDIR} ${PKGNAME}
/usr/bin/rm pp.$$
pkgtrans -s ${BROOT} ${BROOT}/${PKGNAME}.${PKGVER}.pkg ${PKGNAME}
# create the zap file
cd $BROOT
# 7z gives us an extra 2-3% reduction in file size
#zip -9 -q -r ${PKGNAME} ${PKGNAME}
rm -f ${PKGNAME}.${PKGVER}.zap ${PKGNAME}.${PKGVER}.zap.md5 ${PKGNAME}.${PKGVER}.zap.sig
7za a -tzip -mx=9 -mfb=256 ${PKGNAME}.${PKGVER}.zap ${PKGNAME}
chmod a+r ${PKGNAME}.${PKGVER}.zap
cd /
# pregenerate the md5 checksum ready for catalog creation
openssl md5 ${BROOT}/${PKGNAME}.${PKGVER}.zap| /usr/bin/awk '{print $NF}' > ${BROOT}/${PKGNAME}.${PKGVER}.zap.md5
# sign the zap file
${BUILD}/sign-file ${BROOT}/${PKGNAME}.${PKGVER}.zap

ls -lh ${BROOT}/${PKGNAME}.${PKGVER}.pkg
ls -lh ${BROOT}/${PKGNAME}.${PKGVER}.zap
rm -fr ${BROOT}/${PKGNAME}

echo "Checking dependencies"
${THOME}/build/instdepcheck.sh ${PKGNAME} ${BDIR}
